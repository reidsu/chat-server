{"version":3,"sources":["config.js","provider/index.js","provider/message.js","App.js","serviceWorker.js","index.js"],"names":["config","host","msgPro","MessageProvider","Object","classCallCheck","this","fetch","concat","then","_ref","asyncToGenerator","regenerator_default","a","mark","_callee","res","data","wrap","_context","prev","next","json","sent","abrupt","stop","_x","apply","arguments","text","url","method","headers","Content-Type","body","qs","stringify","App","_this","possibleConstructorReturn","getPrototypeOf","call","init","getMessageList","list","setState","messageList","handlerInput","e","inputText","target","value","handlerKeydonw","keyCode","postMessage","state","length","sendMessage","clearMessage","document","addEventListener","socket","io","on","alert","that","react_default","createElement","className","map","message","index","key","moment","creationDate","format","onChange","onClick","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.3ec33c25.chunk.js","sourcesContent":["export default {\r\n  // host: \"http://localhost:3001\"\r\n  host: \"\",\r\n}","import MessageProvider from \"./message\";\r\n\r\n\r\nconst msgPro = new MessageProvider();\r\n\r\nexport { msgPro};","import config from \"./../config\";\r\nimport qs from 'qs';\r\nexport default class MessageProvider {\r\n  constructor() {\r\n    this.host = config.host\r\n  }\r\n  getMessageList() {\r\n    return fetch(`${this.host}/message`).then(async (res) => {\r\n      const data = await res.json();\r\n      return data;\r\n    })\r\n  }\r\n\r\n  sendMessage(text) {\r\n    const url = `${this.host}/message`;\r\n    fetch(url, {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": 'application/x-www-form-urlencoded;charset=utf-8',\r\n      },\r\n      body: qs.stringify({\r\n        text\r\n      })\r\n    })\r\n  }\r\n\r\n  clearMessage() {\r\n    const url = `${this.host}/message`;\r\n    fetch(url, {\r\n      method: \"DELETE\",\r\n    })\r\n  }\r\n}\r\n\r\n","import React, { Component } from 'react';\nimport moment from \"moment\";\nimport io from 'socket.io-client';\nimport {msgPro} from \"./provider/index\";\nimport config from \"./config\";\nimport './App.css';\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      messageList: [],\n      inputText: \"\",\n    }\n  }\n  init = () => {\n    msgPro.getMessageList().then((list) => {\n      this.setState({\n        messageList: list,\n      })\n    })\n  }\n  componentDidMount() {\n    this.init();\n    document.addEventListener(\"keydown\",this.handlerKeydonw);\n    const socket = io(config.host);\n    socket.on('connect', function(){});\n    socket.on('event', function(data){});\n    socket.on('disconnect', function(){\n      alert(\"服务断开连接， 请刷新页面\");\n    });\n    const that = this;\n    socket.on('message', function(data){\n      that.init();\n    });\n  }\n  handlerInput = (e) => {\n    this.setState({\n      inputText: e.target.value\n    })\n  }\n  handlerKeydonw = (e) => {\n    if (e.keyCode  === 13) {\n      this.postMessage();\n    }\n  }\n  postMessage = () => {\n    if (this.state.inputText.length === 0) {\n      return;\n    }\n    msgPro.sendMessage(this.state.inputText);\n    this.setState({\n      inputText: \"\"\n    })\n  }\n  clearMessage = () => {\n    msgPro.clearMessage();\n  }\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"App-content\">\n          <div className=\"chat\">\n            <div className=\"chat-message\">\n              <div className=\"message-content\">\n                <ul className=\"message-table\">\n                {this.state.messageList.map((message, index) => {\n                  return (\n                    <li key={index}  className=\"message-line\">\n                      {message.text}\n                      <div className=\"message-time\">\n                      <span >{moment(message.creationDate).format(\"M-DD h:mm\")}</span>\n                      </div>\n                    </li>\n                  )\n                })}\n                </ul>\n               \n              </div>\n              <div className=\"message-footer\">\n                <input className=\"message-input\" value={this.state.inputText} onChange={this.handlerInput}></input>\n                <button className=\"message-input-btn\"  onClick={this.postMessage}>发送</button>\n              </div>\n            </div>\n            <div className=\"chat-file\">\n              <div className=\"file-list\">\n                文件列表\n              </div>\n              <div className=\"clear\">\n              <button className=\"message-input-btn-clear\" onClick={this.clearMessage} >清除消息</button>\n              <button className=\"message-input-btn-clear\" >清除文件</button>\n              </div>\n            </div>\n          </div>\n        </div>\n   \n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}